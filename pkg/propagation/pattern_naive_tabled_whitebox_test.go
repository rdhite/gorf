package propagation

import (
	"math"
	"math/rand"
	"testing"
)

func TestInterpolateGain(t *testing.T) {
	// 5 degree increments of sinc(x)
	gains := []AngleGain{
		{0.0, 0.0},
		{0.08726646259971647, -0.05454054458026095},
		{0.17453292519943295, -0.21983777126213422},
		{0.2617993877991494, -0.50117235596562},
		{0.3490658503988659, -0.9082811626241205},
		{0.4363323129985824, -1.4571324902625578},
		{0.5235987755982988, -2.1734311903530883},
		{0.6108652381980153, -3.0998751627434293},
		{0.6981317007977318, -4.312889814575687},
		{0.7853981633974483, -5.968701048312801},
		{0.8726646259971648, -8.475439913094885},
		{0.9599310885968813, -13.80580078882681},
		{1.0471975511965976, -13.477016917132602},
		{1.1344640137963142, -9.391788694130094},
		{1.2217304763960306, -7.768586183066576},
		{1.3089969389957472, -6.974739072233438},
		{1.3962634015954636, -6.656005507654099},
		{1.4835298641951802, -6.690277899802651},
		{1.5707963267948966, -7.041012590548733},
		{1.6580627893946132, -7.726521256980377},
		{1.7453292519943295, -8.832621882204137},
		{1.8325957145940461, -10.595080689277589},
		{1.9198621771937625, -13.84030081722194},
		{2.007128639793479, -24.496048412655345},
		{2.0943951023931953, -13.524934049040251},
		{2.1816615649929116, -11.033611013962437},
		{2.2689280275926285, -9.791388359437617},
		{2.356194490192345, -9.15276724600403},
		{2.443460952792061, -8.920425600510448},
		{2.5307274153917776, -9.024219066622031},
		{2.6179938779914944, -9.456662047559654},
		{2.705260340591211, -10.26707094912579},
		{2.792526803190927, -11.602337837682084},
		{2.8797932657906435, -13.898046647692793},
		{2.9670597283903604, -19.55374542542918},
		{3.0543261909900763, -17.520166029045537},
		{3.141592653589793, -13.605271710099258},
		{3.22885911618951, -17.520166029045537},
		{3.316125578789226, -19.55374542542918},
		{3.4033920413889427, -13.898046647692793},
		{3.490658503988659, -11.602337837682084},
		{3.5779249665883754, -10.26707094912579},
		{3.665191429188092, -9.456662047559654},
		{3.7524578917878086, -9.024219066622031},
		{3.839724354387525, -8.920425600510448},
		{3.9269908169872414, -9.15276724600403},
		{4.014257279586958, -9.791388359437617},
		{4.101523742186675, -11.033611013962437},
		{4.188790204786391, -13.524934049040251},
		{4.276056667386108, -24.496048412655345},
		{4.363323129985824, -13.84030081722194},
		{4.4505895925855405, -10.595080689277589},
		{4.537856055185257, -8.832621882204137},
		{4.625122517784973, -7.726521256980377},
		{4.71238898038469, -7.041012590548733},
		{4.799655442984406, -6.690277899802651},
		{4.886921905584122, -6.656005507654099},
		{4.974188368183839, -6.974739072233438},
		{5.061454830783555, -7.768586183066576},
		{5.148721293383272, -9.391788694130094},
		{5.235987755982989, -13.477016917132602},
		{5.323254218582705, -13.80580078882681},
		{5.410520681182422, -8.475439913094885},
		{5.497787143782138, -5.968701048312801},
		{5.585053606381854, -4.312889814575687},
		{5.672320068981571, -3.0998751627434293},
		{5.759586531581287, -2.1734311903530883},
		{5.8468529941810035, -1.4571324902625578},
		{5.934119456780721, -0.9082811626241205},
		{6.021385919380437, -0.50117235596562},
		{6.1086523819801535, -0.21983777126213422},
		{6.19591884457987, -0.05454054458026095},
	}

	for i := 0; i < len(gains)-1; i++ {
		currGain, nextGain := gains[i], gains[i+1]
		angle := currGain.Angle + rand.Float64()*(nextGain.Angle-currGain.Angle)

		expected := interpolate(currGain.Angle, currGain.Gain, nextGain.Angle, nextGain.Gain, angle)
		actual := interpolateGain(gains, angle)

		if expected != actual {
			t.Errorf("interpolateGain incorrect - interpolation\n\texpected:\t%v\n\tgot:\t\t%v", expected, actual)
		}
	}

	zeroActual, twoPiActual := interpolateGain(gains, 0), interpolateGain(gains, 2*math.Pi)
	if zeroActual != twoPiActual {
		t.Errorf("interpolateGain incorrect - ends\nzero: %v\n2pi:  %v", zeroActual, twoPiActual)
	}

	last := gains[len(gains)-1]
	loopAroundAngle := last.Angle + rand.Float64()*(2*math.Pi-last.Angle)
	expected := interpolate(last.Angle, last.Gain, 2*math.Pi, gains[0].Gain, loopAroundAngle)
	actual := interpolateGain(gains, loopAroundAngle)
	if expected != actual {
		t.Errorf("interpolateGain incorrect - loop around\n\texpected:\t%v\n\tgot:\t\t%v", expected, actual)
	}
}
